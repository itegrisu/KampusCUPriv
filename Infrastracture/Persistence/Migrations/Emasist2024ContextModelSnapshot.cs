// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(Emasist2024Context))]
    partial class Emasist2024ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entities.AuthManagements.AuthPage", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("HelpFileName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsShowMenu")
                        .HasColumnType("bit");

                    b.Property<string>("MenuLink")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PathForAuthCheck")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PhysicalFilePath")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("RedirectName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("RowNo")
                        .HasColumnType("int");

                    b.HasKey("Gid");

                    b.ToTable("AuthPages");
                });

            modelBuilder.Entity("Domain.Entities.AuthManagements.AuthRole", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("IconImage")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RoleDescription")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("RowNo")
                        .HasColumnType("int");

                    b.HasKey("Gid");

                    b.ToTable("AuthRoles");
                });

            modelBuilder.Entity("Domain.Entities.AuthManagements.AuthRolePage", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<Guid>("GidPageFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GidRoleFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RowNo")
                        .HasColumnType("int");

                    b.HasKey("Gid");

                    b.HasIndex("GidPageFK");

                    b.HasIndex("GidRoleFK");

                    b.ToTable("AuthRolePages");
                });

            modelBuilder.Entity("Domain.Entities.AuthManagements.AuthUserRole", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<Guid?>("GidPageFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GidRoleFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GidUserFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RowNo")
                        .HasColumnType("int");

                    b.HasKey("Gid");

                    b.HasIndex("GidPageFK");

                    b.HasIndex("GidRoleFK");

                    b.HasIndex("GidUserFK");

                    b.ToTable("AuthUserRoles");
                });

            modelBuilder.Entity("Domain.Entities.DefinitionManagements.Country", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("PhoneCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.HasKey("Gid");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Domain.Entities.GeneralManagements.User", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("AktifHesapMi")
                        .HasColumnType("bit");

                    b.Property<int>("Cinsiyet")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DogumTarihi")
                        .HasColumnType("datetime");

                    b.Property<string>("DogumYeri")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EMailAktivasyonDurumu")
                        .HasColumnType("int");

                    b.Property<string>("EPosta")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EhliyetNo")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("GidUyrukFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Gsm")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("KanGrubu")
                        .HasColumnType("int");

                    b.Property<string>("KimlikNo")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("MedeniDurumu")
                        .HasColumnType("int");

                    b.Property<string>("Not")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("PasaportNo")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ProfilResmi")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("SGKNo")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Sifre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SifreGuncellemeToken")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("SifreHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("SistemAdminMi")
                        .HasColumnType("bit");

                    b.Property<int>("SmsAktivasyonDurumu")
                        .HasColumnType("int");

                    b.Property<string>("Soyadi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("TokenGecerlilikSuresi")
                        .HasColumnType("datetime");

                    b.Property<string>("Unvani")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.HasKey("Gid");

                    b.HasIndex("GidUyrukFK");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.GeneralManagements.UserRefreshToken", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GidUserFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Gid");

                    b.HasIndex("GidUserFK");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("Domain.Entities.LogManagements.LogAuthorizationError", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<Guid?>("GidUserFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("JSonData")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Operation")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PageInfo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.HasKey("Gid");

                    b.HasIndex("GidUserFK");

                    b.ToTable("LogAuthorizationErrors");
                });

            modelBuilder.Entity("Domain.Entities.LogManagements.LogEmailSend", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<Guid>("GidUserFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Gid");

                    b.HasIndex("GidUserFK");

                    b.ToTable("LogEmailSends");
                });

            modelBuilder.Entity("Domain.Entities.LogManagements.LogFailedLogin", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Gid");

                    b.ToTable("LogFailedLogins");
                });

            modelBuilder.Entity("Domain.Entities.LogManagements.LogSuccessedLogin", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<Guid>("GidUserFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LogOutDate")
                        .HasColumnType("varchar(48)");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Gid");

                    b.HasIndex("GidUserFK");

                    b.ToTable("LogSuccessedLogins");
                });

            modelBuilder.Entity("Domain.Entities.LogManagements.LogUserPageVisit", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<Guid>("GidUserFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PageInfo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Gid");

                    b.HasIndex("GidUserFK");

                    b.ToTable("LogUserPageVisits");
                });

            modelBuilder.Entity("Domain.Entities.LogManagements.LogUserPageVisitAction", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<Guid>("GidUserFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("JSonData")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PageInfo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.HasKey("Gid");

                    b.HasIndex("GidUserFK");

                    b.ToTable("LogUserPageVisitActions");
                });

            modelBuilder.Entity("Domain.Entities.PortalManagements.PortalParameter", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateTimeValue")
                        .HasColumnType("datetime");

                    b.Property<double?>("DecimalValue")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("IntegerValue")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("ParameterValueType")
                        .HasColumnType("int");

                    b.Property<string>("StringValue")
                        .HasColumnType("varchar(max)");

                    b.HasKey("Gid");

                    b.ToTable("PortalParameters");
                });

            modelBuilder.Entity("Domain.Entities.PortalManagements.PortalText", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ContentRich")
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(max)");

                    b.Property<bool>("IsRichTextBox")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Gid");

                    b.ToTable("PortalTexts");
                });

            modelBuilder.Entity("Domain.Entities.AuthManagements.AuthRolePage", b =>
                {
                    b.HasOne("Domain.Entities.AuthManagements.AuthPage", "AuthPageFK")
                        .WithMany("AuthRolePages")
                        .HasForeignKey("GidPageFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.AuthManagements.AuthRole", "AuthRoleFK")
                        .WithMany("AuthRolePages")
                        .HasForeignKey("GidRoleFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AuthPageFK");

                    b.Navigation("AuthRoleFK");
                });

            modelBuilder.Entity("Domain.Entities.AuthManagements.AuthUserRole", b =>
                {
                    b.HasOne("Domain.Entities.AuthManagements.AuthPage", "AuthPageFK")
                        .WithMany("AuthUserRoles")
                        .HasForeignKey("GidPageFK")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.AuthManagements.AuthRole", "AuthRoleFK")
                        .WithMany("AuthUserRoles")
                        .HasForeignKey("GidRoleFK")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.GeneralManagements.User", "UserFK")
                        .WithMany("AuthUserRoles")
                        .HasForeignKey("GidUserFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AuthPageFK");

                    b.Navigation("AuthRoleFK");

                    b.Navigation("UserFK");
                });

            modelBuilder.Entity("Domain.Entities.GeneralManagements.User", b =>
                {
                    b.HasOne("Domain.Entities.DefinitionManagements.Country", "CountryFK")
                        .WithMany("Users")
                        .HasForeignKey("GidUyrukFK")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CountryFK");
                });

            modelBuilder.Entity("Domain.Entities.GeneralManagements.UserRefreshToken", b =>
                {
                    b.HasOne("Domain.Entities.GeneralManagements.User", "UserFK")
                        .WithMany("UserRefreshTokens")
                        .HasForeignKey("GidUserFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserFK");
                });

            modelBuilder.Entity("Domain.Entities.LogManagements.LogAuthorizationError", b =>
                {
                    b.HasOne("Domain.Entities.GeneralManagements.User", "UserFK")
                        .WithMany("LogAuthorizationErrors")
                        .HasForeignKey("GidUserFK")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("UserFK");
                });

            modelBuilder.Entity("Domain.Entities.LogManagements.LogEmailSend", b =>
                {
                    b.HasOne("Domain.Entities.GeneralManagements.User", "UserFK")
                        .WithMany("LogEmailSends")
                        .HasForeignKey("GidUserFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserFK");
                });

            modelBuilder.Entity("Domain.Entities.LogManagements.LogSuccessedLogin", b =>
                {
                    b.HasOne("Domain.Entities.GeneralManagements.User", "UserFK")
                        .WithMany("LogSuccessedLogins")
                        .HasForeignKey("GidUserFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserFK");
                });

            modelBuilder.Entity("Domain.Entities.LogManagements.LogUserPageVisit", b =>
                {
                    b.HasOne("Domain.Entities.GeneralManagements.User", "UserFK")
                        .WithMany("LogUserPageActions")
                        .HasForeignKey("GidUserFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserFK");
                });

            modelBuilder.Entity("Domain.Entities.LogManagements.LogUserPageVisitAction", b =>
                {
                    b.HasOne("Domain.Entities.GeneralManagements.User", "UserFK")
                        .WithMany("LogUserPageActionDetails")
                        .HasForeignKey("GidUserFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserFK");
                });

            modelBuilder.Entity("Domain.Entities.AuthManagements.AuthPage", b =>
                {
                    b.Navigation("AuthRolePages");

                    b.Navigation("AuthUserRoles");
                });

            modelBuilder.Entity("Domain.Entities.AuthManagements.AuthRole", b =>
                {
                    b.Navigation("AuthRolePages");

                    b.Navigation("AuthUserRoles");
                });

            modelBuilder.Entity("Domain.Entities.DefinitionManagements.Country", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.GeneralManagements.User", b =>
                {
                    b.Navigation("AuthUserRoles");

                    b.Navigation("LogAuthorizationErrors");

                    b.Navigation("LogEmailSends");

                    b.Navigation("LogSuccessedLogins");

                    b.Navigation("LogUserPageActionDetails");

                    b.Navigation("LogUserPageActions");

                    b.Navigation("UserRefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
