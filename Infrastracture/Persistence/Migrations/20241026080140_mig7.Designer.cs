// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(Emasist2024Context))]
    [Migration("20241026080140_mig7")]
    partial class mig7
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entities.AnnouncementManagements.Announcement", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Link")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("RowNo")
                        .HasColumnType("int");

                    b.Property<int>("ShowType")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Gid");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("Domain.Entities.AnnouncementManagements.AnnouncementRecipient", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Confirm")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<Guid>("GidAnnouncementFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GidRecipientFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReadIpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Gid");

                    b.HasIndex("GidAnnouncementFK");

                    b.HasIndex("GidRecipientFK");

                    b.ToTable("AnnouncementRecipients");
                });

            modelBuilder.Entity("Domain.Entities.AuthManagements.AuthPage", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("HelpFileName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsShowMenu")
                        .HasColumnType("bit");

                    b.Property<string>("MenuLink")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PathForAuthCheck")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PhysicalFilePath")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("RedirectName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("RowNo")
                        .HasColumnType("int");

                    b.HasKey("Gid");

                    b.ToTable("AuthPages");
                });

            modelBuilder.Entity("Domain.Entities.AuthManagements.AuthRole", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("IconImage")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RoleDescription")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("RowNo")
                        .HasColumnType("int");

                    b.HasKey("Gid");

                    b.ToTable("AuthRoles");
                });

            modelBuilder.Entity("Domain.Entities.AuthManagements.AuthRolePage", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<Guid>("GidPageFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GidRoleFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RowNo")
                        .HasColumnType("int");

                    b.HasKey("Gid");

                    b.HasIndex("GidPageFK");

                    b.HasIndex("GidRoleFK");

                    b.ToTable("AuthRolePages");
                });

            modelBuilder.Entity("Domain.Entities.AuthManagements.AuthUserRole", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<Guid?>("GidPageFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GidRoleFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GidUserFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RowNo")
                        .HasColumnType("int");

                    b.HasKey("Gid");

                    b.HasIndex("GidPageFK");

                    b.HasIndex("GidRoleFK");

                    b.HasIndex("GidUserFK");

                    b.ToTable("AuthUserRoles");
                });

            modelBuilder.Entity("Domain.Entities.DefinitionManagements.City", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<Guid>("GidCountryFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PlateCode")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.HasKey("Gid");

                    b.HasIndex("GidCountryFK");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Domain.Entities.DefinitionManagements.Country", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneCode")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<int>("RowNo")
                        .HasColumnType("int");

                    b.HasKey("Gid");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Domain.Entities.DefinitionManagements.Currency", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Symbol")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.HasKey("Gid");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Domain.Entities.DefinitionManagements.DocumentType", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Gid");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("Domain.Entities.DefinitionManagements.ForeignLanguage", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("LanguageCode")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Gid");

                    b.ToTable("ForeignLanguages");
                });

            modelBuilder.Entity("Domain.Entities.DefinitionManagements.JobType", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Gid");

                    b.ToTable("JobTypes");
                });

            modelBuilder.Entity("Domain.Entities.DefinitionManagements.MeasureType", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Gid");

                    b.ToTable("MeasureTypes");
                });

            modelBuilder.Entity("Domain.Entities.DefinitionManagements.OrganizationType", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.HasKey("Gid");

                    b.ToTable("OrganizationTypes");
                });

            modelBuilder.Entity("Domain.Entities.DefinitionManagements.OtoBrand", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Gid");

                    b.ToTable("OtoBrands");
                });

            modelBuilder.Entity("Domain.Entities.DefinitionManagements.PermitType", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Gid");

                    b.ToTable("PermitTypes");
                });

            modelBuilder.Entity("Domain.Entities.DefinitionManagements.RoomType", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Gid");

                    b.ToTable("RoomTypes");
                });

            modelBuilder.Entity("Domain.Entities.DefinitionManagements.StockCategory", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Gid");

                    b.ToTable("StockCategories");
                });

            modelBuilder.Entity("Domain.Entities.FinanceManagements.FinanceExpense", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AmountSpent")
                        .HasMaxLength(10)
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Document")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("ExpenseStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("GidApprovalReceiverFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GidCurrencyFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GidExpenseGroupFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GidMoneyReceivePersonnelFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GidMoneySenderPersonnelFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GidOrganizationFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ReceiverAcceptDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ReceiverAcceptStatus")
                        .HasColumnType("int");

                    b.Property<string>("ReceiverIpAddress")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("ReceiverRejectDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime");

                    b.HasKey("Gid");

                    b.HasIndex("GidApprovalReceiverFK");

                    b.HasIndex("GidCurrencyFK");

                    b.HasIndex("GidExpenseGroupFK");

                    b.HasIndex("GidMoneyReceivePersonnelFK");

                    b.HasIndex("GidMoneySenderPersonnelFK");

                    b.HasIndex("GidOrganizationFK");

                    b.ToTable("FinanceExpenses");
                });

            modelBuilder.Entity("Domain.Entities.FinanceManagements.FinanceExpenseDetail", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ControlDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ControlDescription")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Document")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<double>("Fee")
                        .HasMaxLength(10)
                        .HasColumnType("float");

                    b.Property<Guid?>("GidControlPersonnelFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GidCurrencyFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GidExpenseFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GidSpendPersonnelFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SpentTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime");

                    b.HasKey("Gid");

                    b.HasIndex("GidControlPersonnelFK");

                    b.HasIndex("GidCurrencyFK");

                    b.HasIndex("GidExpenseFK");

                    b.HasIndex("GidSpendPersonnelFK");

                    b.ToTable("FinanceExpenseDetails");
                });

            modelBuilder.Entity("Domain.Entities.FinanceManagements.FinanceExpenseGroup", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ExpenseGroupStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("RowNo")
                        .HasColumnType("int");

                    b.HasKey("Gid");

                    b.ToTable("FinanceExpenseGroups");
                });

            modelBuilder.Entity("Domain.Entities.FinanceManagements.FinanceIncome", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Document")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<double>("Fee")
                        .HasMaxLength(10)
                        .HasColumnType("float");

                    b.Property<Guid>("GidCurrencyFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GidIncomeGroupFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IncomeStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("MaturityDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Gid");

                    b.HasIndex("GidCurrencyFK");

                    b.HasIndex("GidIncomeGroupFK");

                    b.ToTable("FinanceIncomes");
                });

            modelBuilder.Entity("Domain.Entities.FinanceManagements.FinanceIncomeGroup", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("IncomeGroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("IncomeGroupStatus")
                        .HasColumnType("int");

                    b.Property<int>("RowNo")
                        .HasColumnType("int");

                    b.HasKey("Gid");

                    b.ToTable("FinanceIncomeGroups");
                });

            modelBuilder.Entity("Domain.Entities.GeneralManagements.Department", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<Guid?>("GidCoAdminFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GidMainAdminFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Gid");

                    b.HasIndex("GidCoAdminFK");

                    b.HasIndex("GidMainAdminFK");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Domain.Entities.GeneralManagements.DepartmentUser", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<Guid>("GidDepartmentFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GidPersonnelFK")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Gid");

                    b.HasIndex("GidDepartmentFK");

                    b.HasIndex("GidPersonnelFK");

                    b.ToTable("DepartmentUsers");
                });

            modelBuilder.Entity("Domain.Entities.GeneralManagements.User", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Birthplace")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("BloodGroup")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("DrivingLicenseNo")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("EmailActivationStatus")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<Guid?>("GidNationalityFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Gsm")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("IdentityNo")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLoginStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemAdmin")
                        .HasColumnType("bit");

                    b.Property<int?>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("PassportNo")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PersonnelSpecialNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SGKNo")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SmsActivationStatus")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Title")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("TokenExpiredDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatePasswordToken")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("WorkType")
                        .HasColumnType("int");

                    b.HasKey("Gid");

                    b.HasIndex("GidNationalityFK");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.GeneralManagements.UserModuleAuth", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<Guid>("GidUserFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ModuleType")
                        .HasColumnType("int");

                    b.HasKey("Gid");

                    b.HasIndex("GidUserFK");

                    b.ToTable("UserModuleAuths");
                });

            modelBuilder.Entity("Domain.Entities.GeneralManagements.UserRefreshToken", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GidUserFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Gid");

                    b.HasIndex("GidUserFK");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("Domain.Entities.GeneralManagements.UserShortCut", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<Guid>("GidUserFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PageUrl")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("RowNo")
                        .HasColumnType("int");

                    b.HasKey("Gid");

                    b.HasIndex("GidUserFK");

                    b.ToTable("UserShortCuts");
                });

            modelBuilder.Entity("Domain.Entities.LogManagements.LogAuthorizationError", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<Guid?>("GidUserFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("JSonData")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Operation")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PageInfo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.HasKey("Gid");

                    b.HasIndex("GidUserFK");

                    b.ToTable("LogAuthorizationErrors");
                });

            modelBuilder.Entity("Domain.Entities.LogManagements.LogEmailSend", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<Guid>("GidUserFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Gid");

                    b.HasIndex("GidUserFK");

                    b.ToTable("LogEmailSends");
                });

            modelBuilder.Entity("Domain.Entities.LogManagements.LogFailedLogin", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Gid");

                    b.ToTable("LogFailedLogins");
                });

            modelBuilder.Entity("Domain.Entities.LogManagements.LogSuccessedLogin", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<Guid>("GidUserFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LogOutDate")
                        .HasColumnType("varchar(48)");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Gid");

                    b.HasIndex("GidUserFK");

                    b.ToTable("LogSuccessedLogins");
                });

            modelBuilder.Entity("Domain.Entities.LogManagements.LogUserPageVisit", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<Guid>("GidUserFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PageInfo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Gid");

                    b.HasIndex("GidUserFK");

                    b.ToTable("LogUserPageVisits");
                });

            modelBuilder.Entity("Domain.Entities.LogManagements.LogUserPageVisitAction", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<Guid>("GidUserFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("JSonData")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PageInfo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.HasKey("Gid");

                    b.HasIndex("GidUserFK");

                    b.ToTable("LogUserPageVisitActions");
                });

            modelBuilder.Entity("Domain.Entities.MarketingManagements.MarketingCustomer", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Company")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Duty")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Gsm")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PreviousDuty")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.HasKey("Gid");

                    b.ToTable("MarketingCustomers");
                });

            modelBuilder.Entity("Domain.Entities.MarketingManagements.MarketingVisitPlan", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<Guid>("GidPersonnelFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GidVisitCustomerFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PlanningVisitDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("VisitDate")
                        .HasColumnType("datetime");

                    b.Property<string>("VisitNote")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<int?>("VisitRank")
                        .HasColumnType("int");

                    b.Property<int>("VisitStatus")
                        .HasColumnType("int");

                    b.HasKey("Gid");

                    b.HasIndex("GidPersonnelFK");

                    b.HasIndex("GidVisitCustomerFK");

                    b.ToTable("MarketingVisitPlans");
                });

            modelBuilder.Entity("Domain.Entities.OfferManagements.Offer", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Customer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<int>("OfferStatus")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Gid");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("Domain.Entities.OfferManagements.OfferFile", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Document")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<Guid>("GidOfferFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Gid");

                    b.HasIndex("GidOfferFK");

                    b.ToTable("OfferFiles");
                });

            modelBuilder.Entity("Domain.Entities.OfferManagements.OfferTransaction", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Document")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<Guid>("GidCurrencyFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GidOfferFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("OfferDeadline")
                        .HasColumnType("datetime");

                    b.Property<string>("OfferId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<double>("Total")
                        .HasMaxLength(10)
                        .HasColumnType("float");

                    b.HasKey("Gid");

                    b.HasIndex("GidCurrencyFK");

                    b.HasIndex("GidOfferFK");

                    b.ToTable("OfferTransactions");
                });

            modelBuilder.Entity("Domain.Entities.OrganizationManagements.Organization", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("GidCustomerFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GidOrganizationTypeFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GidResponsibleUserFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("OrganizationStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Gid");

                    b.HasIndex("GidCustomerFK");

                    b.HasIndex("GidOrganizationTypeFK");

                    b.HasIndex("GidResponsibleUserFK");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Domain.Entities.OrganizationManagements.OrganizationFile", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Document")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GidOrganizationFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RowNo")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Gid");

                    b.HasIndex("GidOrganizationFK");

                    b.ToTable("OrganizationFile");
                });

            modelBuilder.Entity("Domain.Entities.OrganizationManagements.OrganizationGroup", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<Guid>("GidOrganizationFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("RowNo")
                        .HasColumnType("int");

                    b.HasKey("Gid");

                    b.HasIndex("GidOrganizationFK");

                    b.ToTable("OrganizationGroups");
                });

            modelBuilder.Entity("Domain.Entities.OrganizationManagements.OrganizationItem", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("GidMainResponsibleUserFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GidOrganizationGroupFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsStar")
                        .HasColumnType("bit");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ItemStatus")
                        .HasColumnType("int");

                    b.Property<bool>("Priority")
                        .HasColumnType("bit");

                    b.Property<int>("RowNo")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Gid");

                    b.HasIndex("GidMainResponsibleUserFK");

                    b.HasIndex("GidOrganizationGroupFK");

                    b.ToTable("OrganizationItems");
                });

            modelBuilder.Entity("Domain.Entities.PersonnelManagements.PersonnelAddress", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("AddressTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<Guid>("GidCityFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GidPersonnelFK")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Gid");

                    b.HasIndex("GidCityFK");

                    b.HasIndex("GidPersonnelFK");

                    b.ToTable("PersonnelAddresses");
                });

            modelBuilder.Entity("Domain.Entities.PersonnelManagements.PersonnelDocument", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Document")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<Guid>("GidDocumentType")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GidPersonnelFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("ValidityDate")
                        .HasColumnType("datetime");

                    b.HasKey("Gid");

                    b.HasIndex("GidDocumentType");

                    b.HasIndex("GidPersonnelFK");

                    b.ToTable("PersonnelDocuments");
                });

            modelBuilder.Entity("Domain.Entities.PersonnelManagements.PersonnelForeignLanguage", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<Guid>("GidLanguageFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GidPersonnelFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReadLevel")
                        .HasColumnType("int");

                    b.Property<int>("SpeakingLevel")
                        .HasColumnType("int");

                    b.HasKey("Gid");

                    b.HasIndex("GidLanguageFK");

                    b.HasIndex("GidPersonnelFK");

                    b.ToTable("PersonnelForeignLanguages");
                });

            modelBuilder.Entity("Domain.Entities.PersonnelManagements.PersonnelGraduatedSchool", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentInfo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Document")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("EducationalInstitutionType")
                        .HasColumnType("int");

                    b.Property<Guid>("GidPersonnelFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("GraduationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SchoolInfo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Gid");

                    b.HasIndex("GidPersonnelFK");

                    b.ToTable("PersonnelGraduatedSchools");
                });

            modelBuilder.Entity("Domain.Entities.PersonnelManagements.PersonnelPassportInfo", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfIssue")
                        .HasColumnType("datetime");

                    b.Property<string>("Document")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<Guid>("GidPersonnelFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PassportNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("ValidityDate")
                        .HasColumnType("datetime");

                    b.HasKey("Gid");

                    b.HasIndex("GidPersonnelFK");

                    b.ToTable("PersonnelPassportInfos");
                });

            modelBuilder.Entity("Domain.Entities.PersonnelManagements.PersonnelPermitInfo", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Document")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<Guid>("GidPermitFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GidPersonnelFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PermitEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("PermitStartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Gid");

                    b.HasIndex("GidPermitFK");

                    b.HasIndex("GidPersonnelFK");

                    b.ToTable("PersonnelPermitInfos");
                });

            modelBuilder.Entity("Domain.Entities.PersonnelManagements.PersonnelResidenceInfo", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfIssue")
                        .HasColumnType("datetime");

                    b.Property<string>("Document")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<Guid>("GidPersonnelFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SessionSerialNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("ValidityDate")
                        .HasColumnType("datetime");

                    b.HasKey("Gid");

                    b.HasIndex("GidPersonnelFK");

                    b.ToTable("PersonnelResidenceInfos");
                });

            modelBuilder.Entity("Domain.Entities.PersonnelManagements.PersonnelWorkingTable", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExitDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("GidPersonnelFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Gid");

                    b.HasIndex("GidPersonnelFK");

                    b.ToTable("PersonnelWorkingTables");
                });

            modelBuilder.Entity("Domain.Entities.PortalManagements.PortalParameter", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateTimeValue")
                        .HasColumnType("datetime");

                    b.Property<double?>("DecimalValue")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("IntegerValue")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("ParameterValueType")
                        .HasColumnType("int");

                    b.Property<string>("StringValue")
                        .HasColumnType("varchar(max)");

                    b.HasKey("Gid");

                    b.ToTable("PortalParameters");
                });

            modelBuilder.Entity("Domain.Entities.PortalManagements.PortalText", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ContentRich")
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(max)");

                    b.Property<bool>("IsRichTextBox")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Gid");

                    b.ToTable("PortalTexts");
                });

            modelBuilder.Entity("Domain.Entities.SupplierCustomerManagements.SCAddress", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("District")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("GidCityFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GidSCCompanyFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Gid");

                    b.HasIndex("GidCityFK");

                    b.HasIndex("GidSCCompanyFK");

                    b.ToTable("SCAddresses");
                });

            modelBuilder.Entity("Domain.Entities.SupplierCustomerManagements.SCBank", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Bank")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("BranchCode")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<Guid>("GidCurrencyFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GidSCCompanyFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IbanNo")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SwiftNo")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Gid");

                    b.HasIndex("GidCurrencyFK");

                    b.HasIndex("GidSCCompanyFK");

                    b.ToTable("SCBanks");
                });

            modelBuilder.Entity("Domain.Entities.SupplierCustomerManagements.SCCompany", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerRank")
                        .HasColumnType("int");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Keywords")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<int>("PartnerType")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SpecialNote")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierRank")
                        .HasColumnType("int");

                    b.Property<string>("TaxNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TaxOffice")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<bool>("WebLoginStatus")
                        .HasColumnType("bit");

                    b.Property<string>("WebSite")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Gid");

                    b.ToTable("SCCompanies");
                });

            modelBuilder.Entity("Domain.Entities.SupplierCustomerManagements.SCEmployer", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Duty")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("GidSCCompanyFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SpecialNote")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.HasKey("Gid");

                    b.HasIndex("GidSCCompanyFK");

                    b.ToTable("SCEmployers");
                });

            modelBuilder.Entity("Domain.Entities.SupplierCustomerManagements.SCWorkHistory", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Detail")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<Guid>("GidSCCompanyFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("WorkDate")
                        .HasColumnType("datetime");

                    b.Property<string>("WorkFile")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Gid");

                    b.HasIndex("GidSCCompanyFK");

                    b.ToTable("SCWorkHistories");
                });

            modelBuilder.Entity("Domain.Entities.SupportManagements.SupportMessage", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<Guid>("GidSenderUserFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GidSupportFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("MessageType")
                        .HasColumnType("int");

                    b.HasKey("Gid");

                    b.HasIndex("GidSenderUserFK");

                    b.HasIndex("GidSupportFK");

                    b.ToTable("SupportMessages");
                });

            modelBuilder.Entity("Domain.Entities.SupportManagements.SupportMessageDetail", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<Guid>("GidMessageFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GidReadUserFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReadDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ReadIp")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Gid");

                    b.HasIndex("GidMessageFK");

                    b.HasIndex("GidReadUserFK");

                    b.ToTable("SupportMessageDetails");
                });

            modelBuilder.Entity("Domain.Entities.SupportManagements.SupportRequest", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedUserFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<int>("PriorityType")
                        .HasColumnType("int");

                    b.Property<int>("SupportStatus")
                        .HasColumnType("int");

                    b.Property<int>("SupportType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Gid");

                    b.HasIndex("CreatedUserFK");

                    b.ToTable("SupportRequests");
                });

            modelBuilder.Entity("Domain.Entities.TaskManagements.Task", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("GidTaskAssignerUserFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PriorityType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Gid");

                    b.HasIndex("GidTaskAssignerUserFK");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Domain.Entities.TaskManagements.TaskComment", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<Guid>("GidTaskFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GidUserFK")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Gid");

                    b.HasIndex("GidTaskFK");

                    b.HasIndex("GidUserFK");

                    b.ToTable("TaskComments");
                });

            modelBuilder.Entity("Domain.Entities.TaskManagements.TaskFile", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("FileDescription")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("FileTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("GidFileUploadUserFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GidTaskFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UploadedFile")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Gid");

                    b.HasIndex("GidFileUploadUserFK");

                    b.HasIndex("GidTaskFK");

                    b.ToTable("TaskFiles");
                });

            modelBuilder.Entity("Domain.Entities.TaskManagements.TaskUser", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<Guid>("GidTaskFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GidUserFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StatusNote")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("TaskState")
                        .HasColumnType("int");

                    b.HasKey("Gid");

                    b.HasIndex("GidTaskFK");

                    b.HasIndex("GidUserFK");

                    b.ToTable("TaskUsers");
                });

            modelBuilder.Entity("Domain.Entities.WarehouseManagements.StockCard", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<Guid>("GidMeasureFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GidStockCategoryFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StockCode")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("StockName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("StockType")
                        .HasColumnType("int");

                    b.HasKey("Gid");

                    b.HasIndex("GidMeasureFK");

                    b.HasIndex("GidStockCategoryFK");

                    b.ToTable("StockCards");
                });

            modelBuilder.Entity("Domain.Entities.WarehouseManagements.StockCardImage", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<Guid>("GidStockCardFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("RowNo")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Gid");

                    b.HasIndex("GidStockCardFK");

                    b.ToTable("StockCardImages");
                });

            modelBuilder.Entity("Domain.Entities.WarehouseManagements.StockMovement", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Document")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<Guid?>("GidNextWarehouseFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GidPreviousWarehouseFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GidStockCardFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MovementType")
                        .HasColumnType("int");

                    b.Property<int>("OperationType")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime");

                    b.HasKey("Gid");

                    b.HasIndex("GidNextWarehouseFK");

                    b.HasIndex("GidPreviousWarehouseFK");

                    b.HasIndex("GidStockCardFK");

                    b.ToTable("StockMovements");
                });

            modelBuilder.Entity("Domain.Entities.WarehouseManagements.Warehouse", b =>
                {
                    b.Property<Guid>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataState")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<Guid?>("GidOrganizationFK")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("WarehouseType")
                        .HasColumnType("int");

                    b.HasKey("Gid");

                    b.HasIndex("GidOrganizationFK");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("Domain.Entities.AnnouncementManagements.AnnouncementRecipient", b =>
                {
                    b.HasOne("Domain.Entities.AnnouncementManagements.Announcement", "Announcement")
                        .WithMany("AnnouncementRecipients")
                        .HasForeignKey("GidAnnouncementFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.GeneralManagements.User", "UserFK")
                        .WithMany("AnnouncementRecipients")
                        .HasForeignKey("GidRecipientFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Announcement");

                    b.Navigation("UserFK");
                });

            modelBuilder.Entity("Domain.Entities.AuthManagements.AuthRolePage", b =>
                {
                    b.HasOne("Domain.Entities.AuthManagements.AuthPage", "AuthPageFK")
                        .WithMany("AuthRolePages")
                        .HasForeignKey("GidPageFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.AuthManagements.AuthRole", "AuthRoleFK")
                        .WithMany("AuthRolePages")
                        .HasForeignKey("GidRoleFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AuthPageFK");

                    b.Navigation("AuthRoleFK");
                });

            modelBuilder.Entity("Domain.Entities.AuthManagements.AuthUserRole", b =>
                {
                    b.HasOne("Domain.Entities.AuthManagements.AuthPage", "AuthPageFK")
                        .WithMany("AuthUserRoles")
                        .HasForeignKey("GidPageFK")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.AuthManagements.AuthRole", "AuthRoleFK")
                        .WithMany("AuthUserRoles")
                        .HasForeignKey("GidRoleFK")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.GeneralManagements.User", "UserFK")
                        .WithMany("AuthUserRoles")
                        .HasForeignKey("GidUserFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AuthPageFK");

                    b.Navigation("AuthRoleFK");

                    b.Navigation("UserFK");
                });

            modelBuilder.Entity("Domain.Entities.DefinitionManagements.City", b =>
                {
                    b.HasOne("Domain.Entities.DefinitionManagements.Country", "CountryFK")
                        .WithMany("Cities")
                        .HasForeignKey("GidCountryFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CountryFK");
                });

            modelBuilder.Entity("Domain.Entities.FinanceManagements.FinanceExpense", b =>
                {
                    b.HasOne("Domain.Entities.GeneralManagements.User", "ApprovalReceiverFK")
                        .WithMany("ApprovedFinanceExpenses")
                        .HasForeignKey("GidApprovalReceiverFK");

                    b.HasOne("Domain.Entities.DefinitionManagements.Currency", "CurrencyFK")
                        .WithMany("FinanceExpenses")
                        .HasForeignKey("GidCurrencyFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.FinanceManagements.FinanceExpenseGroup", "FinanceExpenseGroupFK")
                        .WithMany("FinanceExpenses")
                        .HasForeignKey("GidExpenseGroupFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.GeneralManagements.User", "MoneyReceivePersonnelFK")
                        .WithMany("ReceivedFinanceExpenses")
                        .HasForeignKey("GidMoneyReceivePersonnelFK");

                    b.HasOne("Domain.Entities.GeneralManagements.User", "MoneySenderPersonnelFK")
                        .WithMany("SendedFinanceExpenses")
                        .HasForeignKey("GidMoneySenderPersonnelFK");

                    b.HasOne("Domain.Entities.OrganizationManagements.Organization", "OrganizationFK")
                        .WithMany("FinanceExpenses")
                        .HasForeignKey("GidOrganizationFK")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApprovalReceiverFK");

                    b.Navigation("CurrencyFK");

                    b.Navigation("FinanceExpenseGroupFK");

                    b.Navigation("MoneyReceivePersonnelFK");

                    b.Navigation("MoneySenderPersonnelFK");

                    b.Navigation("OrganizationFK");
                });

            modelBuilder.Entity("Domain.Entities.FinanceManagements.FinanceExpenseDetail", b =>
                {
                    b.HasOne("Domain.Entities.GeneralManagements.User", "ControlPersonnelFK")
                        .WithMany("ControlledFinanceExpenseDetails")
                        .HasForeignKey("GidControlPersonnelFK");

                    b.HasOne("Domain.Entities.DefinitionManagements.Currency", "CurrencyFK")
                        .WithMany("FinanceExpenseDetails")
                        .HasForeignKey("GidCurrencyFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.FinanceManagements.FinanceExpense", "FinanceExpenseFK")
                        .WithMany("FinanceExpenseDetails")
                        .HasForeignKey("GidExpenseFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.GeneralManagements.User", "SpendPersonnelFK")
                        .WithMany("SpendedFinanceExpenseDetails")
                        .HasForeignKey("GidSpendPersonnelFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ControlPersonnelFK");

                    b.Navigation("CurrencyFK");

                    b.Navigation("FinanceExpenseFK");

                    b.Navigation("SpendPersonnelFK");
                });

            modelBuilder.Entity("Domain.Entities.FinanceManagements.FinanceIncome", b =>
                {
                    b.HasOne("Domain.Entities.DefinitionManagements.Currency", "CurrencyFK")
                        .WithMany("FinanceIncomes")
                        .HasForeignKey("GidCurrencyFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.FinanceManagements.FinanceIncomeGroup", "FinanceIncomeGroupFK")
                        .WithMany("FinanceIncomes")
                        .HasForeignKey("GidIncomeGroupFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CurrencyFK");

                    b.Navigation("FinanceIncomeGroupFK");
                });

            modelBuilder.Entity("Domain.Entities.GeneralManagements.Department", b =>
                {
                    b.HasOne("Domain.Entities.GeneralManagements.User", "CoAdminFK")
                        .WithMany("YedekYonetilenDepartmants")
                        .HasForeignKey("GidCoAdminFK");

                    b.HasOne("Domain.Entities.GeneralManagements.User", "MainAdminFK")
                        .WithMany("AsilYonetilenDepartmants")
                        .HasForeignKey("GidMainAdminFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoAdminFK");

                    b.Navigation("MainAdminFK");
                });

            modelBuilder.Entity("Domain.Entities.GeneralManagements.DepartmentUser", b =>
                {
                    b.HasOne("Domain.Entities.GeneralManagements.Department", "DepartmentFK")
                        .WithMany("DepartmentUsers")
                        .HasForeignKey("GidDepartmentFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.GeneralManagements.User", "UserFK")
                        .WithMany("DepartmentUsers")
                        .HasForeignKey("GidPersonnelFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DepartmentFK");

                    b.Navigation("UserFK");
                });

            modelBuilder.Entity("Domain.Entities.GeneralManagements.User", b =>
                {
                    b.HasOne("Domain.Entities.DefinitionManagements.Country", "CountryFK")
                        .WithMany("Users")
                        .HasForeignKey("GidNationalityFK")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CountryFK");
                });

            modelBuilder.Entity("Domain.Entities.GeneralManagements.UserModuleAuth", b =>
                {
                    b.HasOne("Domain.Entities.GeneralManagements.User", "UserFK")
                        .WithMany("UserModuleAuths")
                        .HasForeignKey("GidUserFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserFK");
                });

            modelBuilder.Entity("Domain.Entities.GeneralManagements.UserRefreshToken", b =>
                {
                    b.HasOne("Domain.Entities.GeneralManagements.User", "UserFK")
                        .WithMany("UserRefreshTokens")
                        .HasForeignKey("GidUserFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserFK");
                });

            modelBuilder.Entity("Domain.Entities.GeneralManagements.UserShortCut", b =>
                {
                    b.HasOne("Domain.Entities.GeneralManagements.User", "UserFK")
                        .WithMany("UserShortCuts")
                        .HasForeignKey("GidUserFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserFK");
                });

            modelBuilder.Entity("Domain.Entities.LogManagements.LogAuthorizationError", b =>
                {
                    b.HasOne("Domain.Entities.GeneralManagements.User", "UserFK")
                        .WithMany("LogAuthorizationErrors")
                        .HasForeignKey("GidUserFK")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("UserFK");
                });

            modelBuilder.Entity("Domain.Entities.LogManagements.LogEmailSend", b =>
                {
                    b.HasOne("Domain.Entities.GeneralManagements.User", "UserFK")
                        .WithMany("LogEmailSends")
                        .HasForeignKey("GidUserFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserFK");
                });

            modelBuilder.Entity("Domain.Entities.LogManagements.LogSuccessedLogin", b =>
                {
                    b.HasOne("Domain.Entities.GeneralManagements.User", "UserFK")
                        .WithMany("LogSuccessedLogins")
                        .HasForeignKey("GidUserFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserFK");
                });

            modelBuilder.Entity("Domain.Entities.LogManagements.LogUserPageVisit", b =>
                {
                    b.HasOne("Domain.Entities.GeneralManagements.User", "UserFK")
                        .WithMany("LogUserPageActions")
                        .HasForeignKey("GidUserFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserFK");
                });

            modelBuilder.Entity("Domain.Entities.LogManagements.LogUserPageVisitAction", b =>
                {
                    b.HasOne("Domain.Entities.GeneralManagements.User", "UserFK")
                        .WithMany("LogUserPageActionDetails")
                        .HasForeignKey("GidUserFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserFK");
                });

            modelBuilder.Entity("Domain.Entities.MarketingManagements.MarketingVisitPlan", b =>
                {
                    b.HasOne("Domain.Entities.GeneralManagements.User", "UserFK")
                        .WithMany("MarketingVisitPlans")
                        .HasForeignKey("GidPersonnelFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.MarketingManagements.MarketingCustomer", "MarketingCustomerFK")
                        .WithMany("MarketingVisitPlans")
                        .HasForeignKey("GidVisitCustomerFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MarketingCustomerFK");

                    b.Navigation("UserFK");
                });

            modelBuilder.Entity("Domain.Entities.OfferManagements.OfferFile", b =>
                {
                    b.HasOne("Domain.Entities.OfferManagements.Offer", "OfferFK")
                        .WithMany("OfferFiles")
                        .HasForeignKey("GidOfferFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OfferFK");
                });

            modelBuilder.Entity("Domain.Entities.OfferManagements.OfferTransaction", b =>
                {
                    b.HasOne("Domain.Entities.DefinitionManagements.Currency", "CurrencyFK")
                        .WithMany("OfferTransactions")
                        .HasForeignKey("GidCurrencyFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.OfferManagements.Offer", "OfferFK")
                        .WithMany("OfferTransactions")
                        .HasForeignKey("GidOfferFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CurrencyFK");

                    b.Navigation("OfferFK");
                });

            modelBuilder.Entity("Domain.Entities.OrganizationManagements.Organization", b =>
                {
                    b.HasOne("Domain.Entities.SupplierCustomerManagements.SCCompany", "SCCompanyFK")
                        .WithMany("Organizations")
                        .HasForeignKey("GidCustomerFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.DefinitionManagements.OrganizationType", "OrganizationTypeFK")
                        .WithMany("Organizations")
                        .HasForeignKey("GidOrganizationTypeFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.GeneralManagements.User", "ResponsibleUserFK")
                        .WithMany("Organizations")
                        .HasForeignKey("GidResponsibleUserFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrganizationTypeFK");

                    b.Navigation("ResponsibleUserFK");

                    b.Navigation("SCCompanyFK");
                });

            modelBuilder.Entity("Domain.Entities.OrganizationManagements.OrganizationFile", b =>
                {
                    b.HasOne("Domain.Entities.OrganizationManagements.Organization", "OrganizationFK")
                        .WithMany("OrganizationFiles")
                        .HasForeignKey("GidOrganizationFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrganizationFK");
                });

            modelBuilder.Entity("Domain.Entities.OrganizationManagements.OrganizationGroup", b =>
                {
                    b.HasOne("Domain.Entities.OrganizationManagements.Organization", "OrganizationFK")
                        .WithMany("OrganizationGroups")
                        .HasForeignKey("GidOrganizationFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrganizationFK");
                });

            modelBuilder.Entity("Domain.Entities.OrganizationManagements.OrganizationItem", b =>
                {
                    b.HasOne("Domain.Entities.GeneralManagements.User", "MainResponsibleUserFK")
                        .WithMany("OrganizationItems")
                        .HasForeignKey("GidMainResponsibleUserFK")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.OrganizationManagements.OrganizationGroup", "OrganizationGroupFK")
                        .WithMany("OrganizationItems")
                        .HasForeignKey("GidOrganizationGroupFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MainResponsibleUserFK");

                    b.Navigation("OrganizationGroupFK");
                });

            modelBuilder.Entity("Domain.Entities.PersonnelManagements.PersonnelAddress", b =>
                {
                    b.HasOne("Domain.Entities.DefinitionManagements.City", "CityFK")
                        .WithMany("PersonnelAddresses")
                        .HasForeignKey("GidCityFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.GeneralManagements.User", "UserFK")
                        .WithMany("PersonnelAddresses")
                        .HasForeignKey("GidPersonnelFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CityFK");

                    b.Navigation("UserFK");
                });

            modelBuilder.Entity("Domain.Entities.PersonnelManagements.PersonnelDocument", b =>
                {
                    b.HasOne("Domain.Entities.DefinitionManagements.DocumentType", "DocumentTypeFK")
                        .WithMany("PersonnelDocuments")
                        .HasForeignKey("GidDocumentType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.GeneralManagements.User", "UserFK")
                        .WithMany("PersonnelDocuments")
                        .HasForeignKey("GidPersonnelFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DocumentTypeFK");

                    b.Navigation("UserFK");
                });

            modelBuilder.Entity("Domain.Entities.PersonnelManagements.PersonnelForeignLanguage", b =>
                {
                    b.HasOne("Domain.Entities.DefinitionManagements.ForeignLanguage", "ForeignLanguageFK")
                        .WithMany("PersonnelForeignLanguages")
                        .HasForeignKey("GidLanguageFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.GeneralManagements.User", "UserFK")
                        .WithMany("PersonnelForeignLanguages")
                        .HasForeignKey("GidPersonnelFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ForeignLanguageFK");

                    b.Navigation("UserFK");
                });

            modelBuilder.Entity("Domain.Entities.PersonnelManagements.PersonnelGraduatedSchool", b =>
                {
                    b.HasOne("Domain.Entities.GeneralManagements.User", "UserFK")
                        .WithMany("PersonnelGraduatedSchools")
                        .HasForeignKey("GidPersonnelFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserFK");
                });

            modelBuilder.Entity("Domain.Entities.PersonnelManagements.PersonnelPassportInfo", b =>
                {
                    b.HasOne("Domain.Entities.GeneralManagements.User", "UserFK")
                        .WithMany("PersonnelPassportInfos")
                        .HasForeignKey("GidPersonnelFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserFK");
                });

            modelBuilder.Entity("Domain.Entities.PersonnelManagements.PersonnelPermitInfo", b =>
                {
                    b.HasOne("Domain.Entities.DefinitionManagements.PermitType", "PermitTypeFK")
                        .WithMany("PersonnelPermitInfos")
                        .HasForeignKey("GidPermitFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.GeneralManagements.User", "UserFK")
                        .WithMany("PersonnelPermitInfos")
                        .HasForeignKey("GidPersonnelFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PermitTypeFK");

                    b.Navigation("UserFK");
                });

            modelBuilder.Entity("Domain.Entities.PersonnelManagements.PersonnelResidenceInfo", b =>
                {
                    b.HasOne("Domain.Entities.GeneralManagements.User", "UserFK")
                        .WithMany("PersonnelResidenceInfos")
                        .HasForeignKey("GidPersonnelFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserFK");
                });

            modelBuilder.Entity("Domain.Entities.PersonnelManagements.PersonnelWorkingTable", b =>
                {
                    b.HasOne("Domain.Entities.GeneralManagements.User", "UserFK")
                        .WithMany("PersonnelWorkingTables")
                        .HasForeignKey("GidPersonnelFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserFK");
                });

            modelBuilder.Entity("Domain.Entities.SupplierCustomerManagements.SCAddress", b =>
                {
                    b.HasOne("Domain.Entities.DefinitionManagements.City", "CityFK")
                        .WithMany("SCAddresses")
                        .HasForeignKey("GidCityFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SupplierCustomerManagements.SCCompany", "SCCompanyFK")
                        .WithMany("SCAddresses")
                        .HasForeignKey("GidSCCompanyFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CityFK");

                    b.Navigation("SCCompanyFK");
                });

            modelBuilder.Entity("Domain.Entities.SupplierCustomerManagements.SCBank", b =>
                {
                    b.HasOne("Domain.Entities.DefinitionManagements.Currency", "CurrencyFK")
                        .WithMany("SCBanks")
                        .HasForeignKey("GidCurrencyFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SupplierCustomerManagements.SCCompany", "SCCompanyFK")
                        .WithMany("SCBanks")
                        .HasForeignKey("GidSCCompanyFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CurrencyFK");

                    b.Navigation("SCCompanyFK");
                });

            modelBuilder.Entity("Domain.Entities.SupplierCustomerManagements.SCEmployer", b =>
                {
                    b.HasOne("Domain.Entities.SupplierCustomerManagements.SCCompany", "SCCompanyFK")
                        .WithMany("SCEmployers")
                        .HasForeignKey("GidSCCompanyFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SCCompanyFK");
                });

            modelBuilder.Entity("Domain.Entities.SupplierCustomerManagements.SCWorkHistory", b =>
                {
                    b.HasOne("Domain.Entities.SupplierCustomerManagements.SCCompany", "SCCompanyFK")
                        .WithMany("SCWorkHistories")
                        .HasForeignKey("GidSCCompanyFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SCCompanyFK");
                });

            modelBuilder.Entity("Domain.Entities.SupportManagements.SupportMessage", b =>
                {
                    b.HasOne("Domain.Entities.GeneralManagements.User", "UserFK")
                        .WithMany("SupportMessages")
                        .HasForeignKey("GidSenderUserFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SupportManagements.SupportRequest", "SupportRequestFK")
                        .WithMany("SupportMessages")
                        .HasForeignKey("GidSupportFK")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("SupportRequestFK");

                    b.Navigation("UserFK");
                });

            modelBuilder.Entity("Domain.Entities.SupportManagements.SupportMessageDetail", b =>
                {
                    b.HasOne("Domain.Entities.SupportManagements.SupportMessage", "SupportMessageFK")
                        .WithMany("SupportMessageDetails")
                        .HasForeignKey("GidMessageFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.GeneralManagements.User", "UserFK")
                        .WithMany("SupportMessageDetails")
                        .HasForeignKey("GidReadUserFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SupportMessageFK");

                    b.Navigation("UserFK");
                });

            modelBuilder.Entity("Domain.Entities.SupportManagements.SupportRequest", b =>
                {
                    b.HasOne("Domain.Entities.GeneralManagements.User", "UserFK")
                        .WithMany("SupportRequests")
                        .HasForeignKey("CreatedUserFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserFK");
                });

            modelBuilder.Entity("Domain.Entities.TaskManagements.Task", b =>
                {
                    b.HasOne("Domain.Entities.GeneralManagements.User", "UserFK")
                        .WithMany("Tasks")
                        .HasForeignKey("GidTaskAssignerUserFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserFK");
                });

            modelBuilder.Entity("Domain.Entities.TaskManagements.TaskComment", b =>
                {
                    b.HasOne("Domain.Entities.TaskManagements.Task", "TaskFK")
                        .WithMany("TaskComments")
                        .HasForeignKey("GidTaskFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.GeneralManagements.User", "UserFK")
                        .WithMany("TaskComments")
                        .HasForeignKey("GidUserFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TaskFK");

                    b.Navigation("UserFK");
                });

            modelBuilder.Entity("Domain.Entities.TaskManagements.TaskFile", b =>
                {
                    b.HasOne("Domain.Entities.GeneralManagements.User", "UserFK")
                        .WithMany("TaskFiles")
                        .HasForeignKey("GidFileUploadUserFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TaskManagements.Task", "TaskFK")
                        .WithMany("TaskFiles")
                        .HasForeignKey("GidTaskFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TaskFK");

                    b.Navigation("UserFK");
                });

            modelBuilder.Entity("Domain.Entities.TaskManagements.TaskUser", b =>
                {
                    b.HasOne("Domain.Entities.TaskManagements.Task", "TaskFK")
                        .WithMany("TaskUsers")
                        .HasForeignKey("GidTaskFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.GeneralManagements.User", "UserFK")
                        .WithMany("TaskUsers")
                        .HasForeignKey("GidUserFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TaskFK");

                    b.Navigation("UserFK");
                });

            modelBuilder.Entity("Domain.Entities.WarehouseManagements.StockCard", b =>
                {
                    b.HasOne("Domain.Entities.DefinitionManagements.MeasureType", "MeasureTypeFK")
                        .WithMany("StockCards")
                        .HasForeignKey("GidMeasureFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.DefinitionManagements.StockCategory", "StockCategoryFK")
                        .WithMany("StockCards")
                        .HasForeignKey("GidStockCategoryFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MeasureTypeFK");

                    b.Navigation("StockCategoryFK");
                });

            modelBuilder.Entity("Domain.Entities.WarehouseManagements.StockCardImage", b =>
                {
                    b.HasOne("Domain.Entities.WarehouseManagements.StockCard", "StockCardFK")
                        .WithMany("StockCardImages")
                        .HasForeignKey("GidStockCardFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StockCardFK");
                });

            modelBuilder.Entity("Domain.Entities.WarehouseManagements.StockMovement", b =>
                {
                    b.HasOne("Domain.Entities.WarehouseManagements.Warehouse", "NextWarehouseFK")
                        .WithMany("NextStockMovements")
                        .HasForeignKey("GidNextWarehouseFK");

                    b.HasOne("Domain.Entities.WarehouseManagements.Warehouse", "PreviousWarehouseFK")
                        .WithMany("PreviousStockMovements")
                        .HasForeignKey("GidPreviousWarehouseFK");

                    b.HasOne("Domain.Entities.WarehouseManagements.StockCard", "StockCardFK")
                        .WithMany("StockMovements")
                        .HasForeignKey("GidStockCardFK")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("NextWarehouseFK");

                    b.Navigation("PreviousWarehouseFK");

                    b.Navigation("StockCardFK");
                });

            modelBuilder.Entity("Domain.Entities.WarehouseManagements.Warehouse", b =>
                {
                    b.HasOne("Domain.Entities.OrganizationManagements.Organization", "OrganizationFK")
                        .WithMany("Warehouses")
                        .HasForeignKey("GidOrganizationFK")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("OrganizationFK");
                });

            modelBuilder.Entity("Domain.Entities.AnnouncementManagements.Announcement", b =>
                {
                    b.Navigation("AnnouncementRecipients");
                });

            modelBuilder.Entity("Domain.Entities.AuthManagements.AuthPage", b =>
                {
                    b.Navigation("AuthRolePages");

                    b.Navigation("AuthUserRoles");
                });

            modelBuilder.Entity("Domain.Entities.AuthManagements.AuthRole", b =>
                {
                    b.Navigation("AuthRolePages");

                    b.Navigation("AuthUserRoles");
                });

            modelBuilder.Entity("Domain.Entities.DefinitionManagements.City", b =>
                {
                    b.Navigation("PersonnelAddresses");

                    b.Navigation("SCAddresses");
                });

            modelBuilder.Entity("Domain.Entities.DefinitionManagements.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.DefinitionManagements.Currency", b =>
                {
                    b.Navigation("FinanceExpenseDetails");

                    b.Navigation("FinanceExpenses");

                    b.Navigation("FinanceIncomes");

                    b.Navigation("OfferTransactions");

                    b.Navigation("SCBanks");
                });

            modelBuilder.Entity("Domain.Entities.DefinitionManagements.DocumentType", b =>
                {
                    b.Navigation("PersonnelDocuments");
                });

            modelBuilder.Entity("Domain.Entities.DefinitionManagements.ForeignLanguage", b =>
                {
                    b.Navigation("PersonnelForeignLanguages");
                });

            modelBuilder.Entity("Domain.Entities.DefinitionManagements.MeasureType", b =>
                {
                    b.Navigation("StockCards");
                });

            modelBuilder.Entity("Domain.Entities.DefinitionManagements.OrganizationType", b =>
                {
                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("Domain.Entities.DefinitionManagements.PermitType", b =>
                {
                    b.Navigation("PersonnelPermitInfos");
                });

            modelBuilder.Entity("Domain.Entities.DefinitionManagements.StockCategory", b =>
                {
                    b.Navigation("StockCards");
                });

            modelBuilder.Entity("Domain.Entities.FinanceManagements.FinanceExpense", b =>
                {
                    b.Navigation("FinanceExpenseDetails");
                });

            modelBuilder.Entity("Domain.Entities.FinanceManagements.FinanceExpenseGroup", b =>
                {
                    b.Navigation("FinanceExpenses");
                });

            modelBuilder.Entity("Domain.Entities.FinanceManagements.FinanceIncomeGroup", b =>
                {
                    b.Navigation("FinanceIncomes");
                });

            modelBuilder.Entity("Domain.Entities.GeneralManagements.Department", b =>
                {
                    b.Navigation("DepartmentUsers");
                });

            modelBuilder.Entity("Domain.Entities.GeneralManagements.User", b =>
                {
                    b.Navigation("AnnouncementRecipients");

                    b.Navigation("ApprovedFinanceExpenses");

                    b.Navigation("AsilYonetilenDepartmants");

                    b.Navigation("AuthUserRoles");

                    b.Navigation("ControlledFinanceExpenseDetails");

                    b.Navigation("DepartmentUsers");

                    b.Navigation("LogAuthorizationErrors");

                    b.Navigation("LogEmailSends");

                    b.Navigation("LogSuccessedLogins");

                    b.Navigation("LogUserPageActionDetails");

                    b.Navigation("LogUserPageActions");

                    b.Navigation("MarketingVisitPlans");

                    b.Navigation("OrganizationItems");

                    b.Navigation("Organizations");

                    b.Navigation("PersonnelAddresses");

                    b.Navigation("PersonnelDocuments");

                    b.Navigation("PersonnelForeignLanguages");

                    b.Navigation("PersonnelGraduatedSchools");

                    b.Navigation("PersonnelPassportInfos");

                    b.Navigation("PersonnelPermitInfos");

                    b.Navigation("PersonnelResidenceInfos");

                    b.Navigation("PersonnelWorkingTables");

                    b.Navigation("ReceivedFinanceExpenses");

                    b.Navigation("SendedFinanceExpenses");

                    b.Navigation("SpendedFinanceExpenseDetails");

                    b.Navigation("SupportMessageDetails");

                    b.Navigation("SupportMessages");

                    b.Navigation("SupportRequests");

                    b.Navigation("TaskComments");

                    b.Navigation("TaskFiles");

                    b.Navigation("TaskUsers");

                    b.Navigation("Tasks");

                    b.Navigation("UserModuleAuths");

                    b.Navigation("UserRefreshTokens");

                    b.Navigation("UserShortCuts");

                    b.Navigation("YedekYonetilenDepartmants");
                });

            modelBuilder.Entity("Domain.Entities.MarketingManagements.MarketingCustomer", b =>
                {
                    b.Navigation("MarketingVisitPlans");
                });

            modelBuilder.Entity("Domain.Entities.OfferManagements.Offer", b =>
                {
                    b.Navigation("OfferFiles");

                    b.Navigation("OfferTransactions");
                });

            modelBuilder.Entity("Domain.Entities.OrganizationManagements.Organization", b =>
                {
                    b.Navigation("FinanceExpenses");

                    b.Navigation("OrganizationFiles");

                    b.Navigation("OrganizationGroups");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("Domain.Entities.OrganizationManagements.OrganizationGroup", b =>
                {
                    b.Navigation("OrganizationItems");
                });

            modelBuilder.Entity("Domain.Entities.SupplierCustomerManagements.SCCompany", b =>
                {
                    b.Navigation("Organizations");

                    b.Navigation("SCAddresses");

                    b.Navigation("SCBanks");

                    b.Navigation("SCEmployers");

                    b.Navigation("SCWorkHistories");
                });

            modelBuilder.Entity("Domain.Entities.SupportManagements.SupportMessage", b =>
                {
                    b.Navigation("SupportMessageDetails");
                });

            modelBuilder.Entity("Domain.Entities.SupportManagements.SupportRequest", b =>
                {
                    b.Navigation("SupportMessages");
                });

            modelBuilder.Entity("Domain.Entities.TaskManagements.Task", b =>
                {
                    b.Navigation("TaskComments");

                    b.Navigation("TaskFiles");

                    b.Navigation("TaskUsers");
                });

            modelBuilder.Entity("Domain.Entities.WarehouseManagements.StockCard", b =>
                {
                    b.Navigation("StockCardImages");

                    b.Navigation("StockMovements");
                });

            modelBuilder.Entity("Domain.Entities.WarehouseManagements.Warehouse", b =>
                {
                    b.Navigation("NextStockMovements");

                    b.Navigation("PreviousStockMovements");
                });
#pragma warning restore 612, 618
        }
    }
}
